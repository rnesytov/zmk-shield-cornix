/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&sl {
    ignore-modifiers;

    /delete-property/ quick-release;
};

&sk { quick-release; };

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        left_click_right_click: left_click_right_click {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT_CLICK_RIGHT_CLICK";
            bindings = <&mkp MB1>, <&mkp MB2>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        BKSPC_DEL: BKSPC_DEL {
            compatible = "zmk,behavior-mod-morph";
            label = "BKSPC_DEL";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB           &kp Q  &kp W     &kp E         &kp R  &kp T                                          &kp Y       &kp U  &kp I      &kp O       &kp P          &kp LBKT
&mt LCTRL ESCAPE  &kp A  &kp S     &kp D         &kp F  &kp G                                          &kp H       &kp J  &kp K      &kp L       &kp SEMICOLON  &kp SQT
&sk LSHFT         &kp Z  &kp X     &kp C         &kp V  &kp B      &kp C_PLAY_PAUSE  &kp C_PLAY_PAUSE  &kp N       &kp M  &kp COMMA  &kp PERIOD  &kp SLASH      &sk RIGHT_SHIFT
&kp LCTRL         &mo 3  &kp LGUI  &kp LEFT_ALT  &sl 1  &kp SPACE                                      &BKSPC_DEL  &mo 2  &kp ENTER  &kp HOME    &kp END        &kp RCTRL
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>,
                <&inc_dec_kp C_NEXT C_PREV>;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5                  &kp N6    &kp N7    &kp N8  &kp N9     &kp N0         &kp RBKT
&trans     &trans  &trans  &trans  &trans  &trans                  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &kp MINUS      &kp EQUAL
&trans     &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans  &trans     &kp BACKSLASH  &trans
&trans     &trans  &trans  &trans  &trans  &trans                  &trans    &trans    &trans  &trans     &trans         &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &none           &mmv MOVE_UP    &none            &none   &none                                    &none   &none   &none   &none   &none   &none
&trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &none   &none                                    &none   &none   &none   &none   &none   &none
&trans  &none           &none           &none            &none   &none                    &trans  &trans  &none   &none   &none   &none   &trans  &trans
&trans  &trans          &trans          &trans           &trans  &left_click_right_click                  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &kp C_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_PREVIOUS  &kp C_PLAY_PAUSE                  &kp C_NEXT    &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &trans        &trans        &kp PRINTSCREEN
&trans  &trans      &trans             &trans           &trans          &trans                            &trans        &trans                &trans                &trans        &trans        &trans
&trans  &trans      &trans             &trans           &trans          &trans            &trans  &trans  &bt BT_SEL 0  &bt BT_SEL 1          &bt BT_SEL 2          &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR
&trans  &trans      &trans             &trans           &trans          &trans                            &trans        &trans                &trans                &trans        &trans        &trans
            >;
        };

        layer_4 {
            bindings = <
&kp LS(TILDE)  &kp LS(EXCL)  &kp LS(AT)  &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)                  &kp LS(CARET)  &kp LS(AMPS)  &kp LS(STAR)  &kp LS(LPAR)  &kp LS(RPAR)   &kp LS(RBRC)
&trans         &trans        &trans      &trans         &trans        &trans                         &trans         &trans        &trans        &trans        &kp LS(UNDER)  &kp LS(PLUS)
&trans         &trans        &trans      &trans         &trans        &trans         &trans  &trans  &trans         &trans        &trans        &trans        &kp LS(PIPE)   &trans
&trans         &trans        &trans      &trans         &trans        &trans                         &trans         &trans        &trans        &trans        &trans         &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        symbols {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };
};
